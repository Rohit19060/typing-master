/*! For license information please see main.js.LICENSE.txt */
!function(){var e={426:function(e,t,n){"use strict";var r=n(15),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,'main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  align-items: center;\r\n  gap: 15px;\r\n  font-size: 16px;\r\n}\r\n\r\n.tm-button {\r\n  background-color: white;\r\n  border: none;\r\n  outline: none;\r\n  box-shadow: -1px -1px 12px 3px rgb(232 232 232);\r\n  border-radius: 40px;\r\n  font-size: 20px;\r\n  padding: 5px 30px;\r\n}\r\n\r\n.tm-button:hover {\r\n  background-color: black;\r\n  color: white;\r\n}\r\n\r\n.tm-button:active {\r\n  box-shadow: none;\r\n}\r\n\r\n#typing-stage {\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  -youbkit-touch-callout: none;\r\n  -youbkit-user-select: none;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  /* box-shadow: -1px -1px 12px 3px rgba(232, 232, 232, 1); */\r\n  border: 1px solid black;\r\n  font-size: 34px;\r\n  max-width: 90%;\r\n  padding: 20px;\r\n  user-select: none;\r\n  word-wrap: break-word;\r\n  margin: 25px 0px;\r\n  font-family: "Times New Roman", Times, serif;\r\n}\r\n\r\n.blink {\r\n  background-color: black;\r\n  color: white;\r\n}\r\n\r\n.word {\r\n  padding: 0px 5px;\r\n  border-radius: 6px;\r\n}\r\n\r\n.show {\r\n  display: block;\r\n}\r\n\r\n.disabled {\r\n  color: rgba(143, 143, 143, 0.253);\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n/* Required */\r\n\r\n.incorrect {\r\n  color: red;\r\n}\r\n\r\n.hide {\r\n  display: none;\r\n}\r\n\r\n.correct {\r\n  color: rgba(151, 151, 151, 0.562);\r\n}\r\n\r\n.wrong {\r\n  color: white;\r\n}\r\n\r\n.wrongWord {\r\n  color: red;\r\n}\r\n\r\n.correctWord {\r\n  color: rgb(42, 182, 42);\r\n}\r\n\r\n@keyframes blinking {\r\n  from,\r\n  49.9% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50%,\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n#msgWordCount {\r\n  min-width: 54%;\r\n}\r\n\r\n#currentWord {\r\n  max-width: 30px;\r\n  border: 2px solid black;\r\n  padding: 0px 5px;\r\n  font-size: 20px;\r\n}\r\n\r\n.results {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n  font-size: 28px;\r\n  text-shadow: 2px 1px 5px rgba(128, 128, 128, 0.466);\r\n}\r\n\r\n.results div {\r\n  border: 2px solid rgba(0, 0, 0, 0.199);\r\n  padding: 5px 10px;\r\n}\r\n\r\n#wordDiv {\r\n  text-align: center;\r\n  font-size: 28px;\r\n  text-shadow: 2px 1px 5px rgba(128, 128, 128, 0.466);\r\n}\r\n\r\n#wordDiv span {\r\n  border: 2px solid rgba(0, 0, 0, 0.199);\r\n  padding: 5px 10px;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,mBAAmB;EACnB,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,aAAa;EACb,+CAA+C;EAC/C,mBAAmB;EACnB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,sBAAsB;EACtB,qBAAqB;EACrB,4BAA4B;EAC5B,0BAA0B;EAC1B,uBAAuB;EACvB,mBAAmB;EACnB,2DAA2D;EAC3D,uBAAuB;EACvB,eAAe;EACf,cAAc;EACd,aAAa;EACb,iBAAiB;EACjB,qBAAqB;EACrB,gBAAgB;EAChB,4CAA4C;AAC9C;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,aAAa;AACf;;AAEA,aAAa;;AAEb;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iCAAiC;AACnC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE;;IAEE,UAAU;EACZ;;EAEA;;IAEE,UAAU;EACZ;AACF;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,uBAAuB;EACvB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,mBAAmB;EACnB,SAAS;EACT,gBAAgB;EAChB,eAAe;EACf,mDAAmD;AACrD;;AAEA;EACE,sCAAsC;EACtC,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,mDAAmD;AACrD;;AAEA;EACE,sCAAsC;EACtC,iBAAiB;AACnB",sourcesContent:['main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  align-items: center;\r\n  gap: 15px;\r\n  font-size: 16px;\r\n}\r\n\r\n.tm-button {\r\n  background-color: white;\r\n  border: none;\r\n  outline: none;\r\n  box-shadow: -1px -1px 12px 3px rgb(232 232 232);\r\n  border-radius: 40px;\r\n  font-size: 20px;\r\n  padding: 5px 30px;\r\n}\r\n\r\n.tm-button:hover {\r\n  background-color: black;\r\n  color: white;\r\n}\r\n\r\n.tm-button:active {\r\n  box-shadow: none;\r\n}\r\n\r\n#typing-stage {\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  -youbkit-touch-callout: none;\r\n  -youbkit-user-select: none;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  /* box-shadow: -1px -1px 12px 3px rgba(232, 232, 232, 1); */\r\n  border: 1px solid black;\r\n  font-size: 34px;\r\n  max-width: 90%;\r\n  padding: 20px;\r\n  user-select: none;\r\n  word-wrap: break-word;\r\n  margin: 25px 0px;\r\n  font-family: "Times New Roman", Times, serif;\r\n}\r\n\r\n.blink {\r\n  background-color: black;\r\n  color: white;\r\n}\r\n\r\n.word {\r\n  padding: 0px 5px;\r\n  border-radius: 6px;\r\n}\r\n\r\n.show {\r\n  display: block;\r\n}\r\n\r\n.disabled {\r\n  color: rgba(143, 143, 143, 0.253);\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n/* Required */\r\n\r\n.incorrect {\r\n  color: red;\r\n}\r\n\r\n.hide {\r\n  display: none;\r\n}\r\n\r\n.correct {\r\n  color: rgba(151, 151, 151, 0.562);\r\n}\r\n\r\n.wrong {\r\n  color: white;\r\n}\r\n\r\n.wrongWord {\r\n  color: red;\r\n}\r\n\r\n.correctWord {\r\n  color: rgb(42, 182, 42);\r\n}\r\n\r\n@keyframes blinking {\r\n  from,\r\n  49.9% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50%,\r\n  to {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n#msgWordCount {\r\n  min-width: 54%;\r\n}\r\n\r\n#currentWord {\r\n  max-width: 30px;\r\n  border: 2px solid black;\r\n  padding: 0px 5px;\r\n  font-size: 20px;\r\n}\r\n\r\n.results {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n  font-size: 28px;\r\n  text-shadow: 2px 1px 5px rgba(128, 128, 128, 0.466);\r\n}\r\n\r\n.results div {\r\n  border: 2px solid rgba(0, 0, 0, 0.199);\r\n  padding: 5px 10px;\r\n}\r\n\r\n#wordDiv {\r\n  text-align: center;\r\n  font-size: 28px;\r\n  text-shadow: 2px 1px 5px rgba(128, 128, 128, 0.466);\r\n}\r\n\r\n#wordDiv span {\r\n  border: 2px solid rgba(0, 0, 0, 0.199);\r\n  padding: 5px 10px;\r\n}\r\n'],sourceRoot:""}]),t.Z=a},645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:function(e){"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,i=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,i,o=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(e){s=!0,i=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw i}}return o}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(l," */"),c=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([u]).join("\n")}return[o].join("\n")}},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},u=o.push,c=o.indexOf,d={},p=d.toString,f=d.hasOwnProperty,h=f.toString,g=h.call(Object),m={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},v=function(e){return null!=e&&e===e.window},b=r.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,i,o=(n=n||b).createElement("script");if(o.text=e,t)for(r in x)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var A="3.6.0",C=function(e,t){return new C.fn.init(e,t)};function z(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!y(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:A,constructor:C,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(C.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},C.extend=C.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(u&&r&&(C.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||C.isPlainObject(n)?n:{},i=!1,a[t]=C.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},C.extend({expando:"jQuery"+(A+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=a(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||h.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(z(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(z(Object(e))?C.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(z(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return l(a)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=o[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,r,i,o,a,s,l,u,c,d,p,f,h,g,m,y,v,b,x="sizzle"+1*new Date,w=e.document,k=0,A=0,C=le(),z=le(),E=le(),T=le(),j=function(e,t){return e===t&&(d=!0),0},q={}.hasOwnProperty,S=[],D=S.pop,N=S.push,B=S.push,L=S.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\[[\\x20\\t\\r\\n\\f]*("+P+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+M+"*\\]",I=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",W=new RegExp(M+"+","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),_=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),U=new RegExp(M+"|>"),X=new RegExp(I),Y=new RegExp("^"+P+"$"),V={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},ae=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{B.apply(S=L.call(w.childNodes),w.childNodes),S[w.childNodes.length].nodeType}catch(e){B={apply:S.length?function(e,t){N.apply(e,L.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,u,c,d,h,y,v=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!i&&(p(t),t=t||f,g)){if(11!==w&&(d=K.exec(e)))if(o=d[1]){if(9===w){if(!(u=t.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(v&&(u=v.getElementById(o))&&b(t,u)&&u.id===o)return r.push(u),r}else{if(d[2])return B.apply(r,t.getElementsByTagName(e)),r;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return B.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!T[e+" "]&&(!m||!m.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===w&&(U.test(e)||_.test(e))){for((v=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,ie):t.setAttribute("id",c=x)),s=(h=a(e)).length;s--;)h[s]=(c?"#"+c:":scope")+" "+be(h[s]);y=h.join(",")}try{return B.apply(r,v.querySelectorAll(y)),r}catch(t){T(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,r,i)}function le(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ue(e){return e[x]=!0,e}function ce(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!G.test(t||n&&n.nodeName||"HTML")},p=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!=f&&9===a.nodeType&&a.documentElement?(h=(f=a).documentElement,g=!o(f),w!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=ce((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=Q.test(f.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+O+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Q.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",I)})),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=Q.test(h.compareDocumentPosition),b=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==w&&b(w,e)?-1:t==f||t.ownerDocument==w&&b(w,t)?1:c?H(c,e)-H(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==f?-1:t==f?1:i?-1:o?1:c?H(c,e)-H(c,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?pe(a[r],s[r]):a[r]==w?-1:s[r]==w?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&g&&!T[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){T(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&p(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&q.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(j),d){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return c=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ue,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+M+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(W," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,p,f,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s,b=!1;if(m){if(o){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){for(b=(f=(u=(c=(d=(p=m)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===k&&u[1])&&u[2],p=f&&m.childNodes[f];p=++f&&p&&p[g]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[k,f,b];break}}else if(v&&(b=f=(u=(c=(d=(p=t)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===k&&u[1]),!1===b)for(;(p=++f&&p&&p[g]||(b=f=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==y:1!==p.nodeType)||!++b||(v&&((c=(d=p[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[k,b]),p!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[x]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=H(e,o[a])]=!(n[r]=o[a])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ue((function(e){var t=[],n=[],r=s(e.replace(F,"$1"));return r[x]?ue((function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return se(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ue((function(e){return Y.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ve(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=A++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,l){var u,c,d,p=[k,s];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[o])&&u[0]===k&&u[1]===s)return p[2]=u[2];if(c[o]=p,p[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function ke(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function Ae(e,t,n,r,i,o){return r&&!r[x]&&(r=Ae(r)),i&&!i[x]&&(i=Ae(i,o)),ue((function(o,a,s,l){var u,c,d,p=[],f=[],h=a.length,g=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:ke(g,p,e,s,l),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,l),r)for(u=ke(y,f),r(u,[],s,l),c=u.length;c--;)(d=u[c])&&(y[f[c]]=!(m[f[c]]=d));if(o){if(i||e){if(i){for(u=[],c=y.length;c--;)(d=y[c])&&u.push(m[c]=d);i(null,y=[],u,l)}for(c=y.length;c--;)(d=y[c])&&(u=i?H(o,d):p[c])>-1&&(o[u]=!(a[u]=d))}}else y=ke(y===a?y.splice(h,y.length):y),i?i(null,a,y,l):B.apply(a,y)}))}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],l=a?1:0,c=xe((function(e){return e===t}),s,!0),d=xe((function(e){return H(t,e)>-1}),s,!0),p=[function(e,n,r){var i=!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):d(e,n,r));return t=null,i}];l<o;l++)if(n=r.relative[e[l].type])p=[xe(we(p),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[x]){for(i=++l;i<o&&!r.relative[e[i].type];i++);return Ae(l>1&&we(p),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<i&&Ce(e.slice(l,i)),i<o&&Ce(e=e.slice(i)),i<o&&be(e))}p.push(n)}return we(p)}return ve.prototype=r.filters=r.pseudos,r.setFilters=new ve,a=se.tokenize=function(e,t){var n,i,o,a,s,l,u,c=z[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],u=r.preFilter;s;){for(a in n&&!(i=$.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(F," ")}),s=s.slice(n.length)),r.filter)!(i=V[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):z(e,l).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=E[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Ce(t[n]))[x]?i.push(s):o.push(s);(s=E(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,l,c){var d,h,m,y=0,v="0",b=o&&[],x=[],w=u,A=o||i&&r.find.TAG("*",c),C=k+=null==w?1:Math.random()||.1,z=A.length;for(c&&(u=a==f||a||c);v!==z&&null!=(d=A[v]);v++){if(i&&d){for(h=0,a||d.ownerDocument==f||(p(d),s=!g);m=e[h++];)if(m(d,a||f,s)){l.push(d);break}c&&(k=C)}n&&((d=!m&&d)&&y--,o&&b.push(d))}if(y+=v,n&&v!==y){for(h=0;m=t[h++];)m(b,x,a,s);if(o){if(y>0)for(;v--;)b[v]||x[v]||(x[v]=D.call(l));x=ke(x)}B.apply(l,x),c&&!o&&x.length>0&&y+t.length>1&&se.uniqueSort(l)}return c&&(k=C,u=w),b};return n?ue(o):o}(o,i))).selector=e}return s},l=se.select=function(e,t,n,i){var o,l,u,c,d,p="function"==typeof e&&e,f=!i&&a(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&g&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=V.needsContext.test(e)?0:l.length;o--&&(u=l[o],!r.relative[c=u.type]);)if((d=r.find[c])&&(i=d(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ye(t.parentNode)||t))){if(l.splice(o,1),!(e=i.length&&be(l)))return B.apply(n,i),n;break}}return(p||s(e,f))(i,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=x.split("").sort(j).join("")===x,n.detectDuplicates=!!d,p(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(O,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(r);C.find=E,C.expr=E.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=E.uniqueSort,C.text=E.getText,C.isXMLDoc=E.isXML,C.contains=E.contains,C.escapeSelector=E.escape;var T=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&C(e).is(n))break;r.push(e)}return r},j=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},q=C.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){return y(t)?C.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?C.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?C.grep(e,(function(e){return c.call(t,e)>-1!==n})):C.filter(t,e,n)}C.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?C.find.matchesSelector(r,e)?[r]:[]:C.find.matches(e,C.grep(t,(function(e){return 1===e.nodeType})))},C.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(C(e).filter((function(){for(t=0;t<r;t++)if(C.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)C.find(e,i[t],n);return r>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&q.test(e)?C(e):e||[],!1).length}});var B,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||B,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),D.test(r[1])&&C.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,B=C(b);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&C(e);if(!q.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?C.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(C(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return j((e.parentNode||{}).firstChild,e)},children:function(e){return j(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(S(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},(function(e,t){C.fn[e]=function(n,r){var i=C.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=C.filter(r,i)),this.length>1&&(O[e]||C.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}}));var P=/[^\x20\t\r\n\f]+/g;function R(e){return e}function I(e){throw e}function W(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(P)||[],(function(e,n){t[n]=!0})),t}(e):C.extend({},e);var t,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){C.each(n,(function(n,r){y(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==k(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return C.each(arguments,(function(e,t){for(var n;(n=C.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?C.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return C.Deferred((function(n){C.each(t,(function(t,r){var i=y(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,i){var o=0;function a(e,t,n,i){return function(){var s=this,l=arguments,u=function(){var r,u;if(!(e<o)){if((r=n.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=r&&("object"==typeof r||"function"==typeof r)&&r.then,y(u)?i?u.call(r,a(o,t,R,i),a(o,t,I,i)):(o++,u.call(r,a(o,t,R,i),a(o,t,I,i),a(o,t,R,t.notifyWith))):(n!==R&&(s=void 0,l=[r]),(i||t.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(r){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(r,c.stackTrace),e+1>=o&&(n!==I&&(s=void 0,l=[r]),t.rejectWith(s,l))}};e?c():(C.Deferred.getStackHook&&(c.stackTrace=C.Deferred.getStackHook()),r.setTimeout(c))}}return C.Deferred((function(r){t[0][3].add(a(0,r,y(i)?i:R,r.notifyWith)),t[1][3].add(a(0,r,y(e)?e:R)),t[2][3].add(a(0,r,y(n)?n:I))})).promise()},promise:function(e){return null!=e?C.extend(e,i):i}},o={};return C.each(t,(function(e,r){var a=r[2],s=r[5];i[r[1]]=a.add,s&&a.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=C.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(W(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)W(i[n],a(n),o.reject);return o.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&F.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){r.setTimeout((function(){throw e}))};var $=C.Deferred();function _(){b.removeEventListener("DOMContentLoaded",_),r.removeEventListener("load",_),C.ready()}C.fn.ready=function(e){return $.then(e).catch((function(e){C.readyException(e)})),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||$.resolveWith(b,[C]))}}),C.ready.then=$.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(C.ready):(b.addEventListener("DOMContentLoaded",_),r.addEventListener("load",_));var U=function(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===k(n))for(s in i=!0,n)U(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(C(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},X=/^-ms-/,Y=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(Y,V)}var Z=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function J(){this.expando=C.expando+J.uid++}J.uid=1,J.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Z(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(P)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||C.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var Q=new J,K=new J,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return K.hasData(e)||Q.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){K.set(this,e)})):U(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),C.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,C.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),r=n.length,i=n.shift(),o=C._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){C.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:C.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each((function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){C.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=C.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=b.documentElement,se=function(e){return C.contains(e.ownerDocument,e)},le={composed:!0};ae.getRootNode&&(se=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===C.css(e,"display")};function ce(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return C.css(e,t,"")},l=s(),u=n&&n[3]||(C.cssNumber[t]?"":"px"),c=e.nodeType&&(C.cssNumber[t]||"px"!==u&&+l)&&ie.exec(C.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)C.style(e,t,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,C.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var de={};function pe(e){var t,n=e.ownerDocument,r=e.nodeName,i=de[r];return i||(t=n.body.appendChild(n.createElement(r)),i=C.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),de[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Q.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ue(r)&&(i[o]=pe(r))):"none"!==n&&(i[o]="none",Q.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}C.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?C(this).show():C(this).hide()}))}});var he,ge,me=/^(?:checkbox|radio)$/i,ye=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(ge=b.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),he.appendChild(ge),m.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",m.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function xe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?C.merge([e],n):n}function we(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,m.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var ke=/<|&#?\w+;/;function Ae(e,t,n,r,i){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===k(o))C.merge(p,o.nodeType?[o]:o);else if(ke.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ye.exec(o)||["",""])[1].toLowerCase(),l=be[s]||be._default,a.innerHTML=l[1]+C.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;C.merge(p,a.childNodes),(a=d.firstChild).textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",f=0;o=p[f++];)if(r&&C.inArray(o,r)>-1)i&&i.push(o);else if(u=se(o),a=xe(d.appendChild(o),"script"),u&&we(a),n)for(c=0;o=a[c++];)ve.test(o.type||"")&&n.push(o);return d}var Ce=/^([^.]*)(?:\.(.+)|)/;function ze(){return!0}function Ee(){return!1}function Te(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function je(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)je(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ee;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return C().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=C.guid++)),e.each((function(){C.event.add(this,t,i,r,n)}))}function qe(e,t,n){n?(Q.set(e,t,!1),C.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(C.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),Q.set(this,t,o),r=n(this,t),this[t](),o!==(i=Q.get(this,t))||r?Q.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i&&i.value}else o.length&&(Q.set(this,t,{value:C.event.trigger(C.extend(o[0],C.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&C.event.add(e,t,ze)}C.event={global:{},add:function(e,t,n,r,i){var o,a,s,l,u,c,d,p,f,h,g,m=Q.get(e);if(Z(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&C.find.matchesSelector(ae,i),n.guid||(n.guid=C.guid++),(l=m.events)||(l=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(P)||[""]).length;u--;)f=g=(s=Ce.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),f&&(d=C.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=C.event.special[f]||{},c=C.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&C.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(f,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),C.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,p,f,h,g,m=Q.hasData(e)&&Q.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(P)||[""]).length;u--;)if(f=g=(s=Ce.exec(t[u])||[])[1],h=(s[2]||"").split(".").sort(),f){for(d=C.event.special[f]||{},p=l[f=(r?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));a&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||C.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[u],n,r,!0);C.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),l=C.event.fix(e),u=(Q.get(this,"events")||Object.create(null))[l.type]||[],c=C.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=C.event.handlers.call(this,l,u),t=0;(i=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((C.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?C(i,this).index(u)>-1:C.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&S(t,"input")&&qe(t,"click",ze),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&S(t,"input")&&qe(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&S(t,"input")&&Q.get(t,"click")||S(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ze:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ze,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ze,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ze,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(e,t){C.event.special[e]={setup:function(){return qe(this,e,Te),!1},trigger:function(){return qe(this,e),!0},_default:function(){return!0},delegateType:t}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||C.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),C.fn.extend({on:function(e,t,n,r){return je(this,e,t,n,r)},one:function(e,t,n,r){return je(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,C(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){C.event.remove(this,e,n,t)}))}});var Se=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Be(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Q.hasData(e)&&(s=Q.get(e).events))for(i in Q.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)C.event.add(t,i,s[i][n]);K.hasData(e)&&(o=K.access(e),a=C.extend({},o),K.set(t,a))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Pe(e,t,n,r){t=l(t);var i,o,a,s,u,c,d=0,p=e.length,f=p-1,h=t[0],g=y(h);if(g||p>1&&"string"==typeof h&&!m.checkClone&&De.test(h))return e.each((function(i){var o=e.eq(i);g&&(t[0]=h.call(this,i,o.html())),Pe(o,t,n,r)}));if(p&&(o=(i=Ae(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=C.map(xe(i,"script"),Le)).length;d<p;d++)u=i,d!==f&&(u=C.clone(u,!0,!0),s&&C.merge(a,xe(u,"script"))),n.call(e[d],u,d);if(s)for(c=a[a.length-1].ownerDocument,C.map(a,He),d=0;d<s;d++)u=a[d],ve.test(u.type||"")&&!Q.access(u,"globalEval")&&C.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?C._evalUrl&&!u.noModule&&C._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):w(u.textContent.replace(Ne,""),u,c))}return e}function Re(e,t,n){for(var r,i=t?C.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||C.cleanData(xe(r)),r.parentNode&&(n&&se(r)&&we(xe(r,"script")),r.parentNode.removeChild(r));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),l=se(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(a=xe(s),r=0,i=(o=xe(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||xe(e),a=a||xe(s),r=0,i=o.length;r<i;r++)Oe(o[r],a[r]);else Oe(e,s);return(a=xe(s,"script")).length>0&&we(a,!l&&xe(e,"script")),s},cleanData:function(e){for(var t,n,r,i=C.event.special,o=0;void 0!==(n=e[o]);o++)if(Z(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?C.event.remove(n,r):C.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return U(this,(function(e){return void 0===e?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Pe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Be(this,e).appendChild(e)}))},prepend:function(){return Pe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Be(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(xe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return C.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Se.test(e)&&!be[(ye.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(xe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Pe(this,arguments,(function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(xe(this)),n&&n.replaceChild(t,this))}),e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){C.fn[e]=function(e){for(var n,r=[],i=C(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),C(i[a])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var Ie=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Fe=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},$e=new RegExp(oe.join("|"),"i");function _e(e,t,n){var r,i,o,a,s=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||se(e)||(a=C.style(e,t)),!m.pixelBoxStyles()&&Ie.test(a)&&$e.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(u).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),i=36===t(e.width),c.style.position="absolute",o=12===t(c.offsetWidth/3),ae.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,a,s,l,u=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,i;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ae.appendChild(e).appendChild(t).appendChild(n),i=r.getComputedStyle(t),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),s}}))}();var Xe=["Webkit","Moz","ms"],Ye=b.createElement("div").style,Ve={};function Ge(e){return C.cssProps[e]||Ve[e]||(e in Ye?e:Ve[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ye)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,Je=/^--/,Qe={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=C.css(e,n+oe[a],!0,i)),r?("content"===n&&(l-=C.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(l-=C.css(e,"border"+oe[a]+"Width",!0,i))):(l+=C.css(e,"padding"+oe[a],!0,i),"padding"!==n?l+=C.css(e,"border"+oe[a]+"Width",!0,i):s+=C.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function nt(e,t,n){var r=We(e),i=(!m.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,r),o=i,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ie.test(a)){if(!n)return a;a="auto"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===C.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===C.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+tt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function rt(e,t,n,r,i){return new rt.prototype.init(e,t,n,r,i)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),l=Je.test(t),u=e.style;if(l||(t=Ge(s)),a=C.cssHooks[t]||C.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ce(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(C.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Je.test(t)||(t=Ge(s)),(a=C.cssHooks[t]||C.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=_e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),C.each(["height","width"],(function(e,t){C.cssHooks[t]={get:function(e,n,r){if(n)return!Ze.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):Fe(e,Qe,(function(){return nt(e,t,r)}))},set:function(e,n,r){var i,o=We(e),a=!m.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===C.css(e,"boxSizing",!1,o),l=r?tt(e,t,r,s,o):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-tt(e,t,"border",!1,o)-.5)),l&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),et(0,n,l)}}})),C.cssHooks.marginLeft=Ue(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(e,t){C.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(C.cssHooks[e+t].set=et)})),C.fn.extend({css:function(e,t){return U(this,(function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=We(e),i=t.length;a<i;a++)o[t[a]]=C.css(e,t[a],!1,r);return o}return void 0!==n?C.style(e,t,n):C.css(e,t)}),e,t,arguments.length>1)}}),C.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=rt.prototype.init,C.fx.step={};var it,ot,at=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function lt(){ot&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(lt):r.setTimeout(lt,C.fx.interval),C.fx.tick())}function ut(){return r.setTimeout((function(){it=void 0})),it=Date.now()}function ct(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function dt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=C.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var t=it||ut(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return s.notifyWith(e,[u,r,n]),r<1&&a?n:(a||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var r=C.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=G(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=C.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(u,e,c,u.opts))return y(r.stop)&&(C._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return C.map(c,dt,u),y(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),C.fx.timer(C.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}C.Animation=C.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(P);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,l,u,c,d="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&ue(e),m=Q.get(e,"fxshow");for(r in n.queue||(null==(a=C._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always((function(){p.always((function(){a.unqueued--,C.queue(e,"fx").length||a.empty.fire()}))}))),t)if(i=t[r],at.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}f[r]=m&&m[r]||C.style(e,r)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(f))for(r in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=m&&m.display)&&(u=Q.get(e,"display")),"none"===(c=C.css(e,"display"))&&(u?c=u:(fe([e],!0),u=e.style.display||u,c=C.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===C.css(e,"float")&&(l||(p.done((function(){h.display=u})),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=Q.access(e,"fxshow",{display:u}),o&&(m.hidden=!g),g&&fe([e],!0),p.done((function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),f)C.style(e,r,f[r])}))),l=dt(g?m[r]:0,r,p),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),C.speed=function(e,t,n){var r=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return C.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in C.fx.speeds?r.duration=C.fx.speeds[r.duration]:r.duration=C.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&C.dequeue(this,r.queue)},r},C.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=C.isEmptyObject(e),o=C.speed(t,n,r),a=function(){var t=pt(this,C.extend({},e),o);(i||Q.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=C.timers,a=Q.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&st.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||C.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=C.timers,a=r?r.length:0;for(n.finish=!0,C.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),C.each(["toggle","show","hide"],(function(e,t){var n=C.fn[t];C.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,i)}})),C.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){C.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(it=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),it=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){ot||(ot=!0,lt())},C.fx.stop=function(){ot=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ft,ht=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return U(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){C.removeAttr(this,e)}))}}),C.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?C.prop(e,t,n):(1===o&&C.isXMLDoc(e)||(i=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=C.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(P);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||C.find.attr;ht[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ht[a],ht[a]=i,i=null!=n(e,t,r)?a:null,ht[a]=o),i}}));var gt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function yt(e){return(e.match(P)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(P)||[]}C.fn.extend({prop:function(e,t){return U(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[C.propFix[e]||e]}))}}),C.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(e)||(t=C.propFix[t]||t,i=C.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,l=0;if(y(e))return this.each((function(t){C(this).addClass(e.call(this,t,vt(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(i=vt(n),r=1===n.nodeType&&" "+yt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=yt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,l=0;if(y(e))return this.each((function(t){C(this).removeClass(e.call(this,t,vt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(i=vt(n),r=1===n.nodeType&&" "+yt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=yt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){C(this).toggleClass(e.call(this,n,vt(this),t),t)})):this.each((function(){var t,i,o,a;if(r)for(i=0,o=C(this),a=bt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=vt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+yt(vt(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;C.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,C(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=C.map(i,(function(e){return null==e?"":e+""}))),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=C.valHooks[i.type]||C.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(xt,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:yt(C.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=C(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=C.makeArray(t),a=i.length;a--;)((r=i[a]).selected=C.inArray(C.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},m.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in r;var wt=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,n,i){var o,a,s,l,u,c,d,p,h=[n||b],g=f.call(e,"type")?e.type:e,m=f.call(e,"namespace")?e.namespace.split("."):[];if(a=p=s=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!wt.test(g+C.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[C.expando]?e:new C.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),d=C.event.special[g]||{},i||!d.trigger||!1!==d.trigger.apply(n,t))){if(!i&&!d.noBubble&&!v(n)){for(l=d.delegateType||g,wt.test(l+g)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(n.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||r)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)p=a,e.type=o>1?l:d.bindType||g,(c=(Q.get(a,"events")||Object.create(null))[e.type]&&Q.get(a,"handle"))&&c.apply(a,t),(c=u&&a[u])&&c.apply&&Z(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!Z(n)||u&&y(n[g])&&!v(n)&&((s=n[u])&&(n[u]=null),C.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,kt),n[g](),e.isPropagationStopped()&&p.removeEventListener(g,kt),C.event.triggered=void 0,s&&(n[u]=s)),e.result}},simulate:function(e,t,n){var r=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(r,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each((function(){C.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=Q.access(r,t);i||r.addEventListener(e,n,!0),Q.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=Q.access(r,t)-1;i?Q.access(r,t,i):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}}));var At=r.location,Ct={guid:Date.now()},zt=/\?/;C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Et=/\[\]$/,Tt=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,qt=/^(?:input|select|textarea|keygen)/i;function St(e,t,n,r){var i;if(Array.isArray(t))C.each(t,(function(t,i){n||Et.test(e)?r(e,i):St(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==k(t))r(e,t);else for(i in t)St(e+"["+i+"]",t[i],n,r)}C.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,(function(){i(this.name,this.value)}));else for(n in e)St(n,e[n],t,i);return r.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&qt.test(this.nodeName)&&!jt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,(function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}})):{name:t.name,value:n.replace(Tt,"\r\n")}})).get()}});var Dt=/%20/g,Nt=/#.*$/,Bt=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:GET|HEAD)$/,Ot=/^\/\//,Mt={},Pt={},Rt="*/".concat("*"),It=b.createElement("a");function Wt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(P)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ft(e,t,n,r){var i={},o=e===Pt;function a(s){var l;return i[s]=!0,C.each(e[s]||[],(function(e,s){var u=s(t,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)})),l}return a(t.dataTypes[0])||!i["*"]&&a("*")}function $t(e,t){var n,r,i=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&C.extend(!0,e,r),e}It.href=At.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,C.ajaxSettings),t):$t(C.ajaxSettings,e)},ajaxPrefilter:Wt(Mt),ajaxTransport:Wt(Pt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,a,s,l,u,c,d,p,f=C.ajaxSetup({},t),h=f.context||f,g=f.context&&(h.nodeType||h.jquery)?C(h):C.event,m=C.Deferred(),y=C.Callbacks("once memory"),v=f.statusCode||{},x={},w={},k="canceled",A={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=Lt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)A.always(e[A.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||k;return n&&n.abort(t),z(0,t),this}};if(m.promise(A),f.url=((e||f.url||At.href)+"").replace(Ot,At.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(P)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=It.protocol+"//"+It.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=C.param(f.data,f.traditional)),Ft(Mt,f,t,A),u)return A;for(d in(c=C.event&&f.global)&&0==C.active++&&C.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ht.test(f.type),i=f.url.replace(Nt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Dt,"+")):(p=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(zt.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(Bt,"$1"),p=(zt.test(i)?"&":"?")+"_="+Ct.guid+++p),f.url=i+p),f.ifModified&&(C.lastModified[i]&&A.setRequestHeader("If-Modified-Since",C.lastModified[i]),C.etag[i]&&A.setRequestHeader("If-None-Match",C.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&A.setRequestHeader("Content-Type",f.contentType),A.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Rt+"; q=0.01":""):f.accepts["*"]),f.headers)A.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,A,f)||u))return A.abort();if(k="abort",y.add(f.complete),A.done(f.success),A.fail(f.error),n=Ft(Pt,f,t,A)){if(A.readyState=1,c&&g.trigger("ajaxSend",[A,f]),u)return A;f.async&&f.timeout>0&&(s=r.setTimeout((function(){A.abort("timeout")}),f.timeout));try{u=!1,n.send(x,z)}catch(e){if(u)throw e;z(-1,e)}}else z(-1,"No Transport");function z(e,t,a,l){var d,p,b,x,w,k=t;u||(u=!0,s&&r.clearTimeout(s),n=void 0,o=l||"",A.readyState=e>0?4:0,d=e>=200&&e<300||304===e,a&&(x=function(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(f,A,a)),!d&&C.inArray("script",f.dataTypes)>-1&&C.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),x=function(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(f,x,A,d),d?(f.ifModified&&((w=A.getResponseHeader("Last-Modified"))&&(C.lastModified[i]=w),(w=A.getResponseHeader("etag"))&&(C.etag[i]=w)),204===e||"HEAD"===f.type?k="nocontent":304===e?k="notmodified":(k=x.state,p=x.data,d=!(b=x.error))):(b=k,!e&&k||(k="error",e<0&&(e=0))),A.status=e,A.statusText=(t||k)+"",d?m.resolveWith(h,[p,k,A]):m.rejectWith(h,[A,k,b]),A.statusCode(v),v=void 0,c&&g.trigger(d?"ajaxSuccess":"ajaxError",[A,f,d?p:b]),y.fireWith(h,[A,k]),c&&(g.trigger("ajaxComplete",[A,f]),--C.active||C.event.trigger("ajaxStop")))}return A},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],(function(e,t){C[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:i,data:n,success:r},C.isPlainObject(e)&&e))}})),C.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){C(this).wrapInner(e.call(this,t))})):this.each((function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){C(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var _t={0:200,1223:204},Ut=C.ajaxSettings.xhr();m.cors=!!Ut&&"withCredentials"in Ut,m.ajax=Ut=!!Ut,C.ajaxTransport((function(e){var t,n;if(m.cors||Ut&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(_t[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),C.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),C.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=C("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Yt=[],Vt=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||C.expando+"_"+Ct.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",(function(e,t,n){var i,o,a,s=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Vt,"$1"+i):!1!==e.jsonp&&(e.url+=(zt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||C.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){a=arguments},n.always((function(){void 0===o?C(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(i)),a&&y(o)&&o(a[0]),a=o=void 0})),"script"})),m.createHTMLDocument=((Xt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),o=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=Ae([e],t,o),o&&o.length&&C(o).remove(),C.merge([],i.childNodes)));var r,i,o},C.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=yt(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&C.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(r?C("<div>").append(C.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,(function(t){return e===t.elem})).length},C.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u=C.css(e,"position"),c=C(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=C.css(e,"top"),l=C.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),y(t)&&(t=t.call(e,n,C.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):c.css(d)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){C.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===C.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),i.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-C.css(r,"marginTop",!0),left:t.left-i.left-C.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||ae}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;C.fn[e]=function(r){return U(this,(function(e,r,i){var o;if(v(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),C.each(["top","left"],(function(e,t){C.cssHooks[t]=Ue(m.pixelPosition,(function(e,n){if(n)return n=_e(e,t),Ie.test(n)?C(e).position()[t]+"px":n}))})),C.each({Height:"height",Width:"width"},(function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){C.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return U(this,(function(t,n,i){var o;return v(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?C.css(t,n,s):C.style(t,n,i,s)}),t,a?i:void 0,a)}}))})),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){C.fn[t]=function(e){return this.on(t,e)}})),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Gt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||C.guid++,i},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=S,C.isFunction=y,C.isWindow=v,C.camelCase=G,C.type=k,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Gt,"")},void 0===(n=function(){return C}.apply(t,[]))||(e.exports=n);var Zt=r.jQuery,Jt=r.$;return C.noConflict=function(e){return r.$===C&&(r.$=Jt),e&&r.jQuery===C&&(r.jQuery=Zt),C},void 0===i&&(r.jQuery=r.$=C),C}))},379:function(e,t,n){"use strict";var r,i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function a(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],i=0;i<e.length;i++){var s=e[i],l=t.base?s[0]+t.base:s[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var d=a(c),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(o[d].references++,o[d].updater(p)):o.push({identifier:c,updater:g(p,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,h=0;function g(e,t){var n,r,i;if(t.singleton){var o=h++;n=f||(f=l(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=l(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=a(n[r]);o[i].references--}for(var l=s(e,t),u=0;u<n.length;u++){var c=a(n[u]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}n=l}}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";var e=n(755),t=n.n(e),r={words:["article","auxuliary","abbey","able","about","above","absence","absurd","abuse","accent","acceptance","accessoria","accord","account","accountant","accounting","accusation","accused","achilles","acid","action","activity","actual","acuminata","added","addition","address","adenoidea","adjusted","admiral","admiralty","adopt","adorable","advance","advantage","advice","advised","advisory","aegis","aemia","affairs","aforementioned","aforethought","africa","african","after","again","against","aged","agency","agent","ages","agog","agreement","ahead","aircraft","airplane","aisle","alata","albatross","albicollis","alcohol","algebra","alike","alisation","alise","alised","aliser","alism","alization","alize","alized","alizer","alley","ally","almighty","alms","alone","along","aloud","alphabet","altaic","always","america","american","americanise","americanize","among","amount","ampere","analysis","anchor","ancients","anemone","angina","angle","animal","animals","anniversary","annunciation","another","antarctic","antipodes","anything","apart","apartment","aphasia","apocalypse","apparatus","apparel","apple","appointed","apron","aquatica","arab","arafat","arch","architecture","arctic","area","arena","argument","armada","armed","arms","army","around","arsenic","article","arts","ascension","ascent","ascum","aside","asoka","aspen","assignment","assistant","association","aster","atim","attached","attorney","attrition","audit","auspices","australia","austrian","authorized","avail","avant","averages","avesta","aviv","avoidance","awake","away","axle","ayes","baby","back","backlash","baggage","balance","balanced","ball","balloon","band","bandage","bane","bang","bangles","bank","banner","barn","barred","barrel","barrier","base","based","basil","basin","basket","bated","bath","battery","battle","beam","beaming","bean","bear","bearer","beast","beat","beaten","beater","beaumont","beautiful","become","becomes","bedded","beded","bedroom","beer","beetle","before","begetting","begging","begin","begrudge","behaved","behind","being","belief","believe","bell","bellied","belongings","belt","bench","benefit","bengal","bequest","berlin","berliner","berry","best","bestower","betide","better","betting","between","bewilderment","bike","bill","bird","birth","biscuit","biting","bits","bitter","black","blade","blake","blanket","blazer","blende","blessed","bligh","blight","blind","blindness","blister","block","blood","blooded","blooming","blotched","blower","blown","blue","boar","board","boards","boat","body","boggles","bola","bolt","bolts","bomb","bond","bone","book","boot","booth","boots","born","borne","both","bottle","bottom","bound","bowl","boxwood","bracelet","bradford","branch","branched","brandt","brass","bread","breadth","break","breaker","breakfast","breaks","breasted","breath","bred","brevis","brew","bride","bridge","brief","brigade","britain","broke","bronze","broom","broth","brother","brown","browser","bubble","buck","bucket","buckwheat","buddhism","buddhist","buffalo","built","bump","bunting","buoy","buoyant","burden","bureau","burgundy","burma","burn","burroughs","burst","business","butler","butt","combiningform","conjunction","cabbage","cadmium","cake","calf","call","camera","camp","campaign","candidate","canister","cannon","cant","capacity","capital","caraway","card","care","cares","carnal","carpet","carrier","cart","case","cask","cassete","cassette","cast","caste","cats","caused","cava","caxton","cease","cedar","celebration","cell","cellar","center","centre","cephalica","ceremony","certain","chadic","chain","chair","chairman","challenged","chamber","chambre","chamomile","chance","chancellor","chandler","charm","chart","chase","chaser","chasing","cheek","cheer","cheese","cherry","chest","chestnut","chevrotain","child","childrens","chill","chime","chinensis","chips","chisel","chocolate","chosen","chromosome","church","churchill","chute","cinnamon","circle","circulation","circumstances","citium","city","civil","civilization","claim","clark","clary","class","clean","cleaner","cleaning","clinton","clock","closed","closet","cloth","clothes","cloud","clover","club","coal","coast","coat","coated","cobra","cockles","code","colitis","collar","collects","college","collins","color","colored","colorist","colour","coloured","colourist","colours","column","comb","come","comes","coming","comitans","command","commander","commission","commissions","committee","committees","communication","company","compensation","competence","competing","complex","complexion","concern","concession","conduct","conducted","cone","conference","confidence","connected","conqueror","conscience","conservation","considered","consonant","constitution","construction","control","cooled","cooler","copier","copy","cord","cords","corpuscle","correspondent","cost","cotton","cough","could","council","counted","counter","country","coupon","court","cover","craigie","cramp","cranberry","crane","crater","crayon","cream","creeper","crime","criminal","crookes","cross","crossing","crowned","crusade","crystal","crystallisation","crystallization","cultural","culture","cultures","cure","curse","customer","cuthbert","cutter","cyanide","cycle","cylinders","cypress","determiner","danddeterminer","dale","damage","damned","damnedest","damocles","dance","danger","dark","date","daub","daughter","days","dead","deaf","deafness","deal","dealer","dealing","death","decencies","decision","deck","decker","deductible","deed","deep","deer","defect","deferens","deficiency","deficit","defined","deflection","degree","degrees","deity","delegate","delicious","delight","demeanour","democratic","democrats","demon","demur","departed","department","depends","depressor","derosius","dervish","desk","destitute","destruction","determination","determiner","detriment","deuce","devas","developed","development","devil","devoted","diagram","dichromacy","dicoccoides","dicoccum","dictionary","did","diet","difference","diffrent","digitizing","dimension","dimensional","dimensionality","dimentional","dine","diplomatic","dipper","direction","directory","dirt","dirty","disadvantaged","disc","discharge","discount","discretion","disdain","disease","diseases","dishevelled","disney","disorder","dispatch","dispatcher","dispersed","display","disposed","dispossessed","distance","distraction","distributed","district","disturbance","ditch","diver","divider","division","doctor","does","doing","doing","dollar","dome","domitianus","done","donor","dont","doomsday","door","doubt","dove","down","downs","draw","drawer","drawing","dream","drench","dress","dressed","dresser","dressing","drier","drink","drive","driver","drop","drops","drug","drum","dryer","duality","duck","duckling","ducks","duct","dummy","dump","dust","duty","dying","dynasty","dyou","eagle","eagled","early","earned","earner","earning","ears","earshot","earth","ease","east","easterly","eastern","eastward","eastwards","easy","eaten","eating","echioides","echo","eclipse","economy","edge","edged","edges","edition","editor","educate","educated","education\t\t","education","educational","eduction","eelworm","effacing","effect","effects","effort","effortless","efforts","eggs","egypt","eight","eithties","ejaculation","elbow","elder","elderly","elea","elect","election","electric","electricity","electron","element","elephant","ellison","else","embargo","embrace","emerald","emerge","emergency","eminence","eminent","eminently","emirates","emissary","emission","emmer","empire","emplacement","employed","employement","empt","emption","emptive","enaca","endowed","ends","enemies","energy","engine","engined","engineer","england","english","engraving","enjoyment","enjoys","enough","enter","enterprise","entery","entry","envelope","envelops","envy","epilepsy","equation","equinox","equipment","equitorial","eradication","error","eruption","escape","establihed","established","estate","esteem","estimate","eternal","european","evasion","evening","event","events","ever","everta","every","evidence","evident","evil","evils","evolution","exam","examination","examine","excepted","exception","exchange","exclusion","executive","exempt","exercise","exertion","exist","existence","existent","existing","exmamination","expense","explain","explanatory","exploration","explosion","explosive","exposure","expression","extent","extract","extremes","eyebrows","eyed","eyes","fabric","face","faced","facility","fact","factory","facts","fail","faint","fair","fairer","faithful","faithfully","falkner","fall","fallen","falls","fame","family","famous","fancy","fare","farm","farmer","farming","fast","fastener","fate","father","fathers","faucet","faulkner","fault","favored","favoured","favourite","feather","fechner","federal","feet","fellow","female","feminine","fence","fern","festival","festval","fever","fiber","fibres]","fidelity","field","fight","figure","file","filter","final","finch","finder","fine","finer","finger","fingers","fingertips","finly","fire","fireman","firma","first","fish","fisted","five","fixed","flag","flame","flap","flase","flashpoint","flask","flatter","flavius","flea","flesh","flicker","flies","flight","floor","floribunda","flour","flow","flower","flowered","flowering","flown","fluid","flush","flute","flycatcher","flying","foil","fold","follow","fondle","food","fool","fooled","foot","football","footed","for","force","forces","forecast","forecaster","forecasting","foregoing","foreign","forelock","forest","forget","fork","form","formed","former","forties","forum","found","foundation","founded","fountain","four","fourth","fowl","fraction","frame","frazzle","free","freedom","freeze","french","frequency","fret","friar","friendly","fright","fringe","frog","froing","from","front","frontier","fronts","fruit","fruti","frutti","fulbright","full","fund","funeral","fungus","funny","furred","further","fuzz","gage","gallery","game","games","gamma","gander","ganga","ganges","garde","garden","garlic","gastric","gate","gates","gathering","gauge","gauntlet","gear","geek","gender","gene","general","generalisation","generally","generation","generator","genetic","genus","geoffrey","george","geranium","gereral","germ","germany","gets","getting","ghost","gibe","gift","gilt","ginger","gingerbread","girl","give","given","gives","gladius","gladstone","gland","glass","glasses","gloves","gluten","goat","goats","goby","goddess","godess","godhead","goer","goes","gogh","going","gold","golden","good","goodness","goods","goose","gospels","gourd","governing","government","gown","grab","grace","graciousness","gradation","grade","graft","grain","grained","granadilla","grand","grandis","grandmother","grant","granted","grapes","grapevine","grass","grave","graveolens","gravity","gray","graze","grease","great","greek","green","greener","greenhouse","greens","greetings","gregorian","grey","grimm","grip","gritty","groom","groomed","ground","grounded","group","groups","growing","guard","guess","guest","guide","guilt","guinea","gulf","gull","guns","guts","gutter","hades","hair","haired","half","halfpenny","hall","hammer","hand","handed","handicapped","hands","hanging","hangs","happy","hard","harm","harp","harrison","harvest","harvey","hatch","hater","have","haven","haves","having","havoc","hawk","hazard","hazel","head","headed","heads","health","heart","hearted","hearts","heat","heater","heaven","heavens","heavy","heel","heeled","heels","heisenberg","hell","helm","help","hemiazygos","hemisphere","hemlock","henry","herd","here","here","hereafter","heterophyllum","hide","high","higher","highland","highway","hike","hill","hilt","hind","hindmost","hindrance","hindu","hint","historic","hitch","hoffman","hold","holder","holding","hole","holies","holiness","hollyhock","holy","homage","home","homer","honey","honeysuckle","honor","honored","honour","honoured","hoover","hope","horizon","horned","hornets","horns","horripilated","horse","hortensis","hostel","hostelling","hounoured","hour","hours","house","houses","howard","hugger","hugo","human","humble","humor","humour","hunger","hungry","hunt","hunter","hurt","husband","hyacinth","hyde","hydrangea","hydration","hymns","hypertension","interjection","interrogative","iage","iceberg","icing","idea","identification","identity","illness","illumination","illusion","image","imagination","imitation","immediate","immemorial","immorality","impaired","impairment","imperfect","implement","importance","important","imposed","impossible","impression","inch","incharge","inchenumon","incinerate","income","increase","increment","independence","index","india","indian","indians","indica","indicative","indicator","indicum","indies","indigo","individual","indonesia","indra","indulgence","indulgent","industrial","industry","infant","infection","infectious","infective","infinite","infinitive","infirm","inflicted","influence","informed","initiated","injury","inland","inner","innumerable","inout","insane","insect","inside","insoluble","inspector","instinct","institute","institution","instrument","insurance","insured","integrifolium","intelligence","intensely","intentioned","intentions","intents","interaction","intercourse","interest","interested","interesting","interface","interference","interjection","internal","international","intervention","into","introduce","invention","inverse","investigation","investigator","investment","involved","involvement","ireland","iris","iron","irving","island","islands","isle","isles","israel","issue","iswas","itch","itself","jack","jacket","jain","james","jamesi","jane","jasmine","jazz","jefferson","jelly","jerk","jerker","jerks","jessamine","jesus","jewel","jobless","jobs","john","johns","join","joint","joke","joker","jokes","joking","joneses","journalism","journey","jubilee","judge","judgement","judgment","judice","judicial","judiciary","judy","juggler","juice","juliana","july","jumbo","jump","jumpd","jumped","jumper","jumpiness","jumping","jumpy","junction","juncture","june","jungle","junior","juniper","junk","junket","junketting","junkie","junta","jupiter","juridical","jurisdiction","jurisdictional","jurisprudence","jurist","juror","jury","just","justful","justice","justifiable","justifiably","justification","justified","justifier","justifies","justify","justly","justness","jute","juvenile","juvenility","juxtapose","juxtaposition","kali","kangaroo","karl","kebab","keel","keen","keep","keeper","keeping","keeps","keith","kellog","kellogg","kept","kettle","khayyam","kiang","kibosh","kill","killer","killing","kilometer","kind","kindly","kindness","king","kingdom","kings","kiosk","kippur","kiss","kitchen","klan","klux","knee","kneed","knees","knife","knight","knit","knives","knobs","knock","knockabout","knockdown","knocked","knocker","knocking","knockout","knoll","knot","knots","knotty","know","know","knowing","knowingly","knowledgable","knowledge","knowledge;","knowledgeable","known","knows","knuckle","knuckleduster","koala","kohl","kohlrabi","koichiro","komodo","komodoensis","konrad","kook","kookaburra","kooky","kopeck","koran","koranic","korchnoi","korea","korean","kosher","kowtwo","kraut","kremlin","krill","krishana","krishna","krona","krypton","kuber","kudos","kumbha","kumiss","kumquat","kung","kungfu","kurt","kuwait","kwacha","kwai","kwashiorkor","kybosh","labor","laboratory","labour","laced","lady","laevis","lake","lakes","lakshmi","lamp","lamps","land","lane","language","lanier","lapse","large","lashing","last","latin","launger","lawyer","lazy","lead","leading","leaf","leafs","league","learn","least","leather","leave","leaved","leaves","ledge","leek","left","legged","legs","lemon","length","lens","less","lesser","letter","leucophrys","level","liability","libber","liberal","liberation","liberationist","licence","license","lick","licorice","lien","lies","lieutenant","life","lift","light","lighted","lighting","lightning","lights","like","likely","likes","liking","lily","limb","lime","limit","limited","limits","line","lined","linen","ling","linguistics","linked","lions","lipped","liquid","liquorice","lira","list","literature","litigation","little","live","livelong","liven","livered","living","lizard","loading","loaf","local","lock","lodging","long","look","loose","lord","lords","lordsthe","lorry","lose","lost","lounge","lounger","love","loved","lovely","lover","loving","lower","luck","luck","lucky","lump","lunatic","lung","lying","machine","made","magazine","magic","magistrate","magnolia","maheshshanker","maidenhair","mail","main","maire","major","majority","make","makepeace","maker","makes","making","malaysia","malice","mallow","mammoth","manage","manager","manchester","mandrake","mango","manlike","manner","mannered","manners","mans","many","march","mare","marie","marine","marjoram","mark","marked","market","marks","marmot","marrow","martini","mary","mask","mass","master","match","matched","material","maternal","mathematics","matrix","matter","matters","maugham","mays","mccoy","mckinley","meadow","meal","mean","meaning","means","meant","measure","measures","meat","mechanics","mecum","media","medicine","meditation","medium","meek","meet","meeting","meets","melon","member","membrane","memeory","memories","memory","merchant","mercy","merrier","metal","meteorological","meter","method","metric","metropolitan","mexican","mice","mickey","middle","midland","midnight","migratorius","mildly","mile","milk","milky","mill","million","mills","mind","minded","mined","minor","mint","minute","miracles","mirror","miss","missing","mistaking","mistress","mite","mobile","mobility","model","modulus","moment","monday","money","monitoring","monkey","monley","montenegro","month","monument","mood","moon","moral","more","morning","morris","mortar","moss","most","moth","mothers","motion","motor","motu","mountains","mounted","moustache","mouth","move","movement","much","mugwort","mulberry","mullein","murder","muriaria","muscle","mushroom","music","must","mustache","mustard","nail","name","namibia","napkin","narrow","nasty","national","nations","natural","nature","naval","navy","near","nearby","nearest","nearly","neat","neck","necked","necking","necklace","needle","needles","neglect","negociating","negotiating","nerve","nerves","ness","nest","netting","nettle","network","neurosis","never","news","newspaper","newt","next","nicaragua","nicety","nick","nickname","nigh","night","nigra","nigrum","nile","nilly","nine","nineteen","ninety","nipple","nitty","none","nonscripta","nonsense","nonsticker","norm","normal","north","northern","northwest","nose","nosed","notch","note","nothing","nothings","notice","nourished","nowhere","nuisance","number","numbers","numeral","nuncio","nurse","nursemaid","nursery","nurseryman","nursing","nursury","nurture","nurtured","nutcase","nutcracker","nutcrackers","nuthatch","nutmeg","nutrient","nutrition","nutritional","nutritionally","nutritionist","nutritious","nutritive","nuts","nutshell","nutter","nuttily","nutty","nutural","nuzzle","nyanza","nyasaland","nyctalopia","nylon","nymph","nymphet","nympho","nymphomania","nymphomaniac","oath","oats","object","obseus","obtain","occasion","occassion","occult","ocean","octagon","odds","odoratissima","offender","offensive","offer","offering","office","officer","offices","official","officinalis","often","ogle","oiled","oils","oily","ointment","olatry","older","oleracea","olive","olymipic","olympic","olympics","omelet","onca","once","ones","oneself","onion","only","onto","onup","ooard","open","opened","opener","opera","operater","operation","operative","opinion","opinionated","opportunity","option","opulence","orange","oration","orchid","ordeal","order","ordered","orders","ordinary","ordination","ordnance","organ","organic","organisation","organiser","organization","organizer","organs","oriented","orifice","origin","orthodox","osely","oseness","osity","ostentation","ostwald","oten","other","others","othr","outcrop","outdoors","outlet","outline","outlook","outrageous","outs","ouzel","ovation","over","overthrough","owen","owner","ownership","oxford","oxide","oxygenise","oxygenize","oxymoron","oyster","ozawa","ozone","phrasal","phrase","proanddeterminer","pack","packed","packet","page","pages","pain","paint","painter","painting","pakistan","palace","paleontology","palm","pane","panel","pansy","pants","paper","paperer","papers","park","parsley","parsnip","part","particle","parting","party","passage","past","paste","patch","path","pattern","pauses","payment","peace","peach","peak","peanut","peddle","pelican","pellucida","penality","pence","penny","pentoxide","people","pepper","percept","perception","perfect","perfection","period","permit","person","persons","peso","pharyngealis","philosophy","photograph","phrase","piano","picture","piece","pieces","pigeon","pile","pill","pine","pipe","pistol","pitch","pitcher","place","plague","plan","plane","plank","planks","planning","plant","plantain","plate","platform","play","player","playing","please","pleasure","plenty","plough","ploughshare","ploughshares","plug","plum","pneumonia","pocket","podocarp","poem","point","points","pole","police","policy","pollution","polo","pony","pool","poplar","poppy","pore","port","porter","position","possession","possessions","post","poster","potato","powder","power","precinct","precise","prejudice","premiere","present","preservation","preserved","presidency","president","presidential","press","pressure","pretences","pretty","prevent","prevention","price","principle","printer","prism","process","processing","procession","processor","product","professor","profit","program","programme","progress","project","promise","proof","propeller","property","proportioned","protection","protest","protoytpe","provoking","public","pudding","puller","pulp","pump","pumpkin","pure","purpose","purposes","purpura","push","pussy","qualified","quantity","quarter","quaver","quavering","quavery","quay","quayage","quayside","queasily","queasiness","queasy","quechua","queen","queenlike","queenly","queens","queer","queerly","queerness","quell","quench","quercus","querier","quern","querulous","querulously","querulousness","query","quest","quester","question","questionable","questionably","questioner","questioning","questioningly","questionnaire","quet","queue","queue_up","quibble","quiche","quick","quicken","quickening","quickie","quicklime","quickly","quickness","quicksand","quicksilver","quickstep","quicky","quid","quiddity","quids","quiescence","quiescency","quiescent","quiet","quieten","quietism","quietist","quietly","quietness","quietude","quiety","quiff","quiffy","quill","quilt","quilted","quilting","quince","quincentenary","quincentennial","quinine","quinquenial","quintastic","quintessence","quintessential","quintessentially","quintet","quintette","quintillion","quintuple","quintuplet","quip","quirk","quirkiness","quirky","quiscent","quisling","quit","quite","quits","quittance","quitter","quiver","quivering","quixotic","quiz","quizmaster","quizzer","quizzical","quizzically","quoit","quoits","quorum","quota","quotable","quotation","wordsArray","quoted","quoteunquote","quotha","quothe","quotidian","quotient","reflexivepro","relativepro","rabbit","rabble","race","rack","racket","rackets","racquet","racquets","radar","radiation","radio","radiocommunication","rage","rail","rain","raiser","raleigh","rama","ramrod","range","ranging","rank","ranking","rankle","rape","rarebit","rate","rated","rather","ratherthan","ravages","raving","rays","reach","reactor","read","reading","ready","real","realise","reality","reap","reason","rebirth","receiving","reception","recession","recite","record","recorder","recorderplayer","recording","redeemer","reference","reflection","regard","regent","region","regional","regulator","regulatoryprocedural","rehabilitation","related","relation","relationship","relativity","relief","religion","remain","removed","renowned","repellent","repens","representation","representative","representatives","republic","republics","repulican","request","research","researched","reserve","resistance","resistant","respect","rest","restraint","return","revenue","revised","revolution","rhinoceros","rhodesia","rhyme","ribbon","ribbons","rice","rich","richard","richter","ridden","ride","ridiculous","right","right","rightist","rights","ring","rink","ripe","rise","rites","river","road","roaring","roast","robin","rock","rocket","rocks","roentgen","rogers","role","roll","roller","rolling","roman","romans","rome","rontgen","roof","rooftops","room","root","rope","ropes","rosa","rose","rosemary","roses","rotary","rough","round","roundabouts","rounded","route","royal","ruck","ruffled","rufus","rugosa","rule","rules","running","rupee","russia","russian","rust","ruthlessly","saccharata","sacred","sacrifice","sage","sahara","said","said","sail","salad","salamander","sale","salt","same","sandalwood","sandwich","sapphire","satellite","sauce","saxon","says","scale","scandal","scented","schedule","school","science","scientific","scooter","scorpion","scott","scratch","screen","season","seat","seater","second","secretariat","secretary","security","seeded","seen","sense","separatism","separatist","sepulcher","sepulchre","serbia","sergeon","series","serum","service","setter","setting","settled","seven","shade","shaft","shafted","shakespeare","shaking","shape","shaped","shark","shattering","shaven","shavings","she","sheep","sheet","sheik","sheikh","shell","shift","shilling","ship","shiva","shockley","shoe","shooter","shooting","shop","shopping","short","should","shove","show","shut","side","sided","sight","sign","signal","silica","silicate","silk","sill","site","sitted","situated","skater","sketch","sking","skin","slate","slave","slaver","sleep","sleeve","slow","small","smallpox","smelling","smut","snake","snapdragon","snapper","socialist","sock","socket","soda","softener","softner","soil","soldier","solstice","soluble","someones","somerset","something","soul","souled","sound","soup","sour","southwest","soviet","space","spacing","spade","span","spaniel","spanish","sparrow","spectrum","spider","spinach","spinning","spirit","splitting","spoke","spoken","spoon","sport","sports","spot","spout","spring","sprite","spurs","square","squire","stacked","stage","stand","stapler","star","starters","state","states","station","statist","statistics","steam","steel","stemmed","step","steward","stick","sticks","stitch","stock","stoma","stomach","stop","stoppage","storage","store","stork","strap","streaked","street","stress","strider","strike","striking","string","strings","strip","stripped","stripping","struck","structure","student","study","style","styron","succession","sugar","suit","sulfate","sulfide","sulphate","summit","sunday","sunflower","supply","supremacist","supremacy","surface","surfer","surgeon","surgeondoctor","surgery","surrounding","suspicion","swallow","swan","sweet","swords","sydney","symptom","syndrome","system","table","tables","taft","tail","tailed","takes","talk","talkie","talky","tall","tamarind","tamil","tank","tanzania","tapping","task","taster","taylor","tear","teasel","telegraph","telegraphy","telephone","tell","telling","temporal;","tent","tereshkova","term","terms","terrestrial","terrier","test","thackeray","than","thanks","thapsus","that","theater","theatre","their","them","theory","there","there","theres","thermodynamics","they","thin","thing","things","thinker","thinking","thirds","this","thistle","thompson","thought","throated","through","thrush","thumb","thumbed","thyme","tick","tightrope","till","time","timed","timer","times","timing","tindale","tipped","tire","tissue","toast","tobacco","toed","tolerance","tone","toned","tongue","tooth","torn","toss","tour","towards","tower","trade","traffic","trail","train","training","transmission","trash","travel","traveler","tree","tricolor","tried","trimmer","tritici","trodden","trojan","trousers","truck","truly","trust","tumor","tunnel","turbine","turk","turn","turned","turnip","turnout","twigs","twist","twisted","twister","twisting","twisty","twit","twitch","twitching","twitter","twitterati","twixt","twnety","twofer","twofold","twopence","twopenny","twos","twoscore","twosome","tycoon","tying","tyke","tylenchus","tympanist","tyndale","type","typecast","typeface","typescript","typeset","typesetter","typesetting","typewrite","typewriter","typewriting","typewritten","typhoid","typhoon","typhus","typical","typically","typify","typing","typist","typo","typographer","typographic","typographical","typographically","typography","typology","tyrannic","tyrannical","tyrannicide","tyrannized","tyrannosaur","tyrannosaurus","tyrannous","tyranny","tyrant","tyre","tyro","tzar","tzarina","tzetze","under","understaffed","unit","united","university","upon","upper","uppercase","uppermost","uppish","uppity","upraise","upright","uprightness","uprise","uprising","upriver","uproar","uproarious","uproariously","uproot","uprooted","uprooting","upscale","upset","upsetter","upsetting","upshot","upside","upskill","upslope","upstage","upstager","upstairs","upstanding","upstart","upstate","upstream","upstroke","upsurge","upswing","uptake","upthrust","uptight","uptown","upturn","upturned","upward","upwardly","upwards","upwind","uraemia","uraemic","ural","uralic","urals","uranalysis","urania","uranium","uranius","uranologist","uranology","uranoplasty","uranus","urban","urbane","urbanely","urbanisation","urbanise","urbanised","urbanity","urbanization","urbanize","urbanized","urchin","urdu","urea","uremia","uremic","ureter","urethra","urethral","urethritis","urge","urged","urgency","urgent","urgently","urges","urging","urinal","urinalysis","urinary","urinate","urine","urocystis","urogenital","uroxicide","urubu","uruguayan","usability","usable","usableness","usacil","usaf","usage","usance","usbeg","usbek","usda","useable","useableness","used","useful","usefully","usefulness","useless","uselessly","uselessness","user","usher","usherette","ussr","usual","usually","usufruct","usurer","usurp","usurpation","usurper","usury","usward","utensil","utensils","uterine","uterus","utile","utilisation","utilise","utilitarian","utilitarianism","utility","utilization","utilize","utmost","utopia","utopian","utopianism","utter","utterance","utterer","utterly","uttermost","utterness","uvula","uvular","uvulitis","uxorial","uzbak","uzbeg","uzbek","uzbekistan","vane","vanilla","vapor","vapour","vascular","vehicle","vengeance","vent","versed","vessel","view","vine","vinegar","virus","vise","vitamin","vitriol","voice","volant","volar","volary","volatile","volatilisable","volatilise","volatilised","volatility","volatilizable","volatilize","volatilized","volcanic","volcanically","volcanism","volcano","volcanology","vole","volga","volgograd","volition","volitional","volitionally","volley","volleyball","volt","volta","voltage","voltaic","voltaire","voltarean","voltarian","volte","voltmeter","volubility","voluble","volubly","volume","volumeter","volumetric","volumetrical","volumetrically","voluminosity","voluminous","voluminously","voluminousness","voluntarily","voluntary","volunteer","voluptuary","voluptuous","voluptuously","voluptuousness","volute","voluted","volution","volva","vomer","vomit","vomiter","vomiting","vomitive","vomitory","vomitus","voodoo","voodooism","voracious","voraciously","voraciousness","voracity","vortex","votary","vote","voted","voteless","voter","voting","votive","vouch","vouchee","voucher","vouchsafe","vouge","voussoir","vowel","vowelise","vowelised","vowelize","vowelized","vowelled","vowellike","vower","voyage","voyageable","voyager","voyages","voyeur","voyeurism","voyeuristic","voyeuristical","voyeuristically","vulcan","vulcanisation","vulcanise","vulcanised","vulcaniser","vulcanite","vulcanization","vulcanize","vulcanized","vulcanizer","vulcanology","vulgar","vulgarian","vulgarisation","vulgarise","vulgariser","vulgarism","vulgarity","vulgarization","vulgarize","vulgarizer","vulgarly","vulgar~fraction","vulgate","vulnerability","vulnerable","vulnerably","vulpecular","vulphine","vulpine","vulture","vultures","vulturine","vulturous","vulva","vulval","vullet","vulviform","vulvitis","vying","wait","watch","water","welcome","well","what","white","wish","with","woman","worker","would","woven","wrack","wraith","wraithlike","wrangle","wrangler","wrangling","wrap","wraparound","wrapped","wrapper","wrapping","wrasse","wrath","wrathful","wrathfully","wrawl","wreak","wreath","wreathe","wreathed","wreck","wreckage","wrecked","wrecker","wrecking","wren","wrench","wrenched","wrenching","wrest","wrester","wrestle","wrestler","wrestling","wretch","wretched","wretchedly","wretchedness","wrick","wriggle","wriggler","wriggling","wriggly","wright","wring","wringer","wringing","wrinkle","wrinkled","wrinkleless","wrinkleproof","wrinkles","wrinkly","wrist","wristband","wristwatch","writ","write","writer","writers","writhe","writhed","writhen","writhing","writing","writings","written","wrold","wrong","wrongdoer","wrongdoing","wrongful","wrongfully","wrongfulness","wrongheaded","wrongheadedly","wrongheadedness","wrongly","wrongness","wrote","wroth","wrothful","wrought","wryly","wryneck","wtpf","wuss","wwwituint","wych","wycherley","wycliffe","wysiwyg","xanax","xanthalin","xanthate","xanthein","xanthelasma","xanthic","xanthine","xanthinuria","xanthoderm","xanthoderma","xanthodont","xanthodontous","xanthoma","xanthomatosis","xanthopathy","xanthophyl","xanthophyll","xanthopia","xanthopsia","xanthosis","xanthous","xanthuria","xenagogy","xenarthral","xenia","xenial","xenium","xenodochium","xenodochy","xenogamy","xenogeneic","xenogenesis","xenograft","xenolith","xenomania","xenomaniac","xenomorph","xenomorphic","xenon","xenophanes","xenophobe","xenophobia","xenotransplant","xenotransplantation","xeransis","xerantic","xerasia","xeric","xerochastic","xerocollyrium","xeroderma","xerodermia","xerographic","xerography","xeroma","xeromy","xerophagy","xerophile","xerophilous","xerophthalmia","xerophthalmus","xerophyte","xerophytic","xerophytism","xeroradiography","xerosis","xerostomia","xerotes","xerotic","xerotripsis","xerox","xerxes","xhosa","xiphias","xiphioid","xiphoid","xmas","xylanthrax","xyle","xylem","xylene","xylocaine","xylocarp","xylocrap","xylograph","xylographer","xylographic","xylographical","xylography","xylol","xylology","xylophone","xylophonist","xylose","xyster","xystus","yardstick","yare","yarn","yarrow","yashmac","yashmak","yasser","yataghan","yatch","yaup","yawl","yawn","yawner","yawning","yawp","yaws","yeah","year","yearbook","yearling","yearlong","yearly","yearn","yearned","yearner","yearning","yearningly","years","yeast","yeastlike","yeasty","yeats","yeatsian","yede","yell","yelled","yeller","yelling","yellow","yellowbelly","yellowed","yellowhammer","yellowish","yellowness","yellowsapphire","yellowy","yelp","yelping","yenisei","yenisey","yeoman","yeomanry","yerk","yesterday","yesteryear","yeti","yiddish","yield","yielder","yielding","yieldingly","yisrael","ymca","yobbo","yobo","yodel","yodeling","yodeller","yoga","yogacara","yoghourt","yoghurt","yogi","yogic","yogistic","yogurt","yoicks","yoke","yokel","yokelish","yokohama","yolk","yonder","yore","york","yorkshire","youll","young","youngage","younger","youngest","youngish","youngness","youngs","youngster","younker","your","youre","yours","yourself","youth","youthful","youthfully","youthfulness","youve","yowl","yttrium","yuan","yucca","yucky","yugoslavia","yule","yuletide","yummy","yuppie","yuppy","ywca","zealotry","zealous","zealously","zebra","zebu","zedoary","zedonk","zeitgeist","zend","zenith","zenithal","zeno","zeolite","zephyr","zeppelin","zeppo","zero","zeroth","zest","zestful","zestfully","zestfulness","zestily","zesty","zetland","zeus","ziggurat","zigzag","zikkurat","zikurat","zilch","zill","zillion","zimbabwe","zimbabwean","zimmer","zinc","zinciferous","zincification","zincify","zincite","zincky","zincograph","zincographer","zincographic","zincographical","zincography","zincoid","zincous","zine","zing","zingaro","zinger","zingy","zinnia","zinsser","zinzendorf","zion","zionism","zionist","zipper","zippo","zippy","zircon","zirconium","zither","zithern","ziti","zizania","zoanthropy","zodiac","zodiacal","zoftig","zoiatria","zoisite","zola","zolaesque","zolaism","zollinger","zombi","zombie","zona","zonal","zonary","zone","zoning","zonk","zonked","zonotrichia","zonula","zonule","zooarchaeology","zoobiology","zoochemical","zoochemistry","zoochemy","zoochlorella","zoochore","zoochorous","zoochory","zooerastia","zooerasty","zoogamous","zoogamy","zoogenic","zoogeny","zoogeographer","zoogeographic","zoogeographical","zoogeographically","zoogeography","zoogony","zoographer","zoographic","zoographist","zoography","zooid","zoolatry","zoolite","zoolith","zoological","zoologist","zoology","zoom","zoomancy","zoomania","zoometry","zoomorphic","zoomorphism","zoon","zoonic","zoonite","zoonomia","zoonomy","zoonosis","zoonotic","zooparasite","zooparasitic","zoopathology","zoopathy","zooperal","zoopery","zoophagous","zoophilia","zoophilism","zoophobia","zoophorous","zoophyte","zooplankton","zooplastic","zooplasty","zoopsia","zoopsychology","zooscopy","zoosperm","zoospore","zootaxy","zootechnical","zootechnician","zootechnics","zootechny","zootheism","zootheist","zootic","zootomic","zootomical","zootomist","zootomy","zootoxin","zoozoo","zopilote","zorastrain","zori","zoroaster","zoroastrian","zoroastrianism","zoster","zucchini","zulu","zumba","zygodactyl","zygodactylic","zygodactylous","zygogenesis","zygogenetic","zygoma","zygomatic","zygomorphic","zygomorphism","zygomorphous","zygosis","zygosity","zygospore","zygote","zygotic","zygotically","zylonite","zymase","zyme","zymetologic","zymetologist","zymetology","zymogen","zymogenic","zymogenous","zymoid","zymologic","zymologist","zymology","zymolysis","zymolytic","zymome","zymometer","zymoscope","zymosimeter","zymosis","zymotechmy","zymotechnics","zymotic","zymurgy","zythumzythum"],symbols:[" ",",",".","Backspace","Delete","'",'"'],charArray:["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],capitalCharArray:["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],numCharArray:["1","2","3","4","5","6","7","8","9","0"],symbolCharArray:[",",":",".","?","!",";","'",'"'],status:function(){return this.practice?"Practice":this.setting?"Setting":null!=this.error?"Error":"Training"},practiceMode:function(){this.practice=!0,this.setting=!1},changeSetting:function(){this.practice=!1,this.setting=!0},reset:function(){this.practice=!1,this.setting=!1,this.error=null}},i=n(379),o=n.n(i),a=n(426);o()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;let s,l,u,c,d,p=!1,f=0,h=0,g=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],m=2;const y=[" ",",",".","Backspace","Delete","'",'"'];let v=0;const b=e=>{t()(e).removeClass("blink"),l&&(clearInterval(l),l=null),l||(l=window.setInterval((()=>{t()(e).toggleClass("blink")}),400))},x=()=>{switch(t()("main").html('<h1 class="text-center mt-3">King\'s Typing Master</h1>'),r.status()){case"Practice":t()("main").append('Practice\n     <button class="tm-button" id="done">Done</button>');break;case"Setting":t()("main").append('<div class="text-center">\n                Words Count: <input type="range" id="msgWordCount" value="15" min="1" max="60" step="1">\n                <span id="msgWordCountValue">15</span>\n            </div>\n            <div class="text-center">\n                Word Length: <input type="range" id="wordLength" value="5" min="4" max="10" step="1">\n                <span id="wordLengthValue">5</span>\n            </div>\n            <div class="text-center">\n                Typing By: <input type="radio" id="char" name="type" checked> Char\n                <input type="radio" id="word" name="type"> Word\n            </div>\n            <div>Blink On/Off <input type="checkbox" id="blinkControl" checked></div>\n            <div>Capital Letter <input type="checkbox" id="capControl" checked></div>\n            <button class="tm-button" id="done">Done</button>');break;case"Error":t()("main").append('<div>\n  <p>Error</p>\n  <button id="back">Back</button>\n  </div>');break;default:t()("main").append('\n    <div class="results">\n       <div id="speed">Speed: 0.0</div>\n       <div id="avgSpeed">Avg Speed: 0.0</div>\n       <div id="error">Errors: 0</div>\n    </div>\n        </div>\n        <div id="typing-stage"></div>\n        <div class="hidden my-2" id="msg">\n            <h3>Click again to enable...</h3>\n        </div>\n        <div class="hide" id="wordDiv">\n            Your Input:&nbsp; <span id="wordSpan"></span>\n        </div>\n    <div>\n    <button class="tm-button" id="practice-btn">Practice</button>\n    <button class="tm-button" id="setting-btn">Settings</button>\n    </div>')}(()=>{switch(t()("main").off(),r.status()){case"Practice":t()("#done").on("click",(()=>{console.log("called"),r.reset(),x()}));break;case"Setting":t()("#done").on("click",(()=>{r.reset(),x()}));break;case"Error":t()("main").append(f());break;default:t()("#practice-btn").on("click",(()=>{r.practiceMode(),x()})),t()("#setting-btn").on("click",(()=>{r.changeSetting(),x()}));let e=t()("#typing-stage"),n=t()("#msg");e.on("click",(()=>{if(e.hasClass("disabled")){e.removeClass("disabled"),n.addClass("hidden"),n.removeClass("show");const t=e.children("span");b(t[s])}else n.removeClass("hidden"),n.addClass("show"),e.addClass("disabled"),e.children("span")[s].classList.remove("blink"),l&&(clearInterval(l),l=null)}))}})()},w=()=>{let e=[];s=0;let t=(e=>{let t=e.length;for(;0!==t;){let n=Math.floor(Math.random()*t);t-=1;let r=e[t];e[t]=e[n],e[n]=r}return e})(r.words);for(let n=0;n<t.length&&!(t[n].includes("a")&&(e.push(t[n]),e.length>=5));n++);return e.join(" ")},k=()=>{let e=t()("#typing-stage");w().split("").forEach((t=>{let n=document.createElement("span");" "==t&&(t="␣"),n.innerText=t,e.append(n),"␣"==t&&e.append(document.createElement("wbr"))})),A()},A=()=>{const e=t()("#typing-stage").children("span");b(e[0])};var C={render:x,addSpanToWord:()=>{let e=t()("#typing-stage");w().split(" ").map((t=>{let n=document.createElement("span");n.innerText=t,n.classList.add("word"),e.append(n),e.append(document.createElement("wbr"))})),A()},addSpanToChar:k,keyPressEvent:()=>{let e=t()("#typing-stage");const n=t()("#error");window.addEventListener("keydown",(t=>{p=!1,u||(u=window.setInterval((()=>{p||h++}),200));let r=t.key;if(!e.hasClass("disabled")&&(g.includes(r)||y.includes(r))){const e=document.getElementById("typing-stage").querySelectorAll("span");if(t.key===e[s].innerText||"Space"===t.code&&"␣"===e[s].innerText){if("Space"===t.code&&(v++,d--,d<=1&&u)){v*=300/h,speedArray.push(parseFloat(v.toFixed(3)));let e=0;speedArray.forEach((t=>{e+=t}));let t=e/speedArray.length;n.innerHTML=`Errors: ${f}`,speed.innerHTML=`Speed: ${v.toFixed(1)}`,avgSpeed.innerHTML=`Avg Speed: ${t.toFixed(1)}`,currentWord=g[g.indexOf(currentWord)+1],setLocal("currentWord",currentWord),void 0===currentWord&&(currentWord=g[0],setLocal("currentWord",currentWord)),currentWordInput.value=currentWord,clearInterval(u),u=null,h=0,v=0}e[s].classList.add("correct"),Array.from(e).forEach((t=>{t.classList.contains("wrong")&&(e[s].classList.remove("correct"),t.classList.remove("wrong"),t.classList.add("incorrect"))})),e[s].classList.remove("blink"),s++,s<e.length&&b(e[s]),d<=1&&k()}else e[s].classList.add("wrong"),f++,n.innerText=`Errors: ${f}`}c||(c=window.setInterval((()=>{m--,m<=0&&(p=!0)}),1e3))}))}};C.render(),C.addSpanToChar(),C.keyPressEvent()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,